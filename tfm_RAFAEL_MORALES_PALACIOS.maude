fmod WASM-VALREF-MOD is

  protecting NAT .
  protecting QID .

  sorts ValRef .

  subsorts Nat Qid < ValRef .

endfm

fmod WASM-VALUE-MOD is

  protecting INT .

  sorts Value IntValue .

  subsorts Int < IntValue < Value .

endfm

fmod WASM-INST-MOD is

  protecting WASM-VALREF-MOD .
  protecting WASM-VALUE-MOD .

  sorts Inst Type .

  *** Instruction ops declarations
  op local.get _ : ValRef -> Inst [ctor] .
  op local.set _ : ValRef -> Inst [ctor] .
  op local.tee _ : ValRef -> Inst [ctor] .

  *** TODO: maybe fix to use it as a template??
  *** - The problem is that I think Maude obligues to separate the tokens so it would be like "i32 .const, not i32.const"
  ***op _.const _ : Type Value -> Inst [ctor] .
  op i32.const _ : IntValue -> Inst [ctor] .
  *** TODO: Include more valid types
  ops i32 : -> Type [ctor] .


  *** binop (Binary Operations)
  *** ibinop (Integer binop) - add | sub | mul | div_sx | rem_sx | and | or | xor | shl | shr_sx | rotl | rotr
  op i32.add : -> Inst [ctor] .
  op i32.sub : -> Inst [ctor] .
  op i32.mul : -> Inst [ctor] .
  *** Insts with underscores (_) need to be preprocessed so that Maude does not misinterpret the _ symbol
  op "i32.div_u" : -> Inst [ctor] .
  op "i32.div_s" : -> Inst [ctor] .
  op "i32.rem_u" : -> Inst [ctor] .
  op "i32.rem_s" : -> Inst [ctor] .

  *** Control Instructions
  op nop : -> Inst [ctor] .
  op unreachable : -> Inst [ctor] .

  op block _ : String -> Inst [ctor] .
  op loop _ : String -> Inst [ctor] .
  op end : -> Inst [ctor] .

endfm

view Inst from TRIV to WASM-INST-MOD is
  sort Elt to Inst .
endv

view ValRef from TRIV to WASM-VALREF-MOD is
  sort Elt to ValRef .
endv

view Value from TRIV to WASM-VALUE-MOD is
  sort Elt to Value .
endv

mod WASMMOD is
  *** RAFAEL MORALES PALACIOS - TFM - SEMANTICS OF WEBASSEMBLY IN MAUDE
  
  *** IMPORT DATATYPE MODULES TO BE USED
  ***protecting NAT .
  ***protecting INT .
  ***protecting STRING .
  ***protecting QID .
  protecting WASM-INST-MOD .
  protecting LIST{Inst} .
  protecting MAP{ValRef, Value} .
  
  
  *** Declare sorts to be used and hierarchy between them.
  sorts WASMSim WASMModule TypeVec NeTypeVec TypeDef Id FuncType FuncVec NeFuncVec FuncDef FuncParamList FuncResult FuncExport ExportVec NeExportVec ExportDef InstTag ParamList Param Stack EmptyStack NeStack StackElem ValRefList NeValRefList EmptyLocalStore NeLocalStore Assign Und Trap Arity Label StackAndLabel .
  
  *** Simulator components
  subsorts Stack List{Inst} < WASMSim .
  subsorts EmptyStack NeStack < Stack .
  subsorts EmptyLocalStore NeLocalStore < Map{ValRef, Value} .
  subsorts Assign < NeLocalStore .

  *** Module sections sorts
  ***subsorts NeTypeVec EmptyList < TypeVec .
  ***subsorts TypeDef < NeTypeVec .
  ***subsorts NeFuncVec EmptyList < FuncVec .
  ***subsorts FuncDef < NeFuncVec .
  ***subsorts NeExportVec EmptyList < ExportVec .
  ***subsorts ExportDef < NeExportVec .

  *** Instruction lists sorts
  ***subsorts NeList{Inst} EmptyList < List{Inst} .
  subsorts Trap < Inst . *** < NeList{Inst} .
  *** TODO: Maybe not needed: 
  subsorts Param < ParamList .
  *** TODO: Include variable references as ValRef 
  *** Temporal solution: Use Qid, forces to use ' before the token...check to use $ instead
  ***subsorts Nat Qid < ValRef < NeValRefList < ValRefList .
  *** TODO: Include support for Labels and Activations as Stack values. Problem: collision of operator definition on Nat and String
  *** Temporal solution: Use Qid, forces to use ' before the token...check to use $ instead
  subsorts Value < StackElem < NeStack . ***subsorts Int Und < IntValue < Value < StackElem < NeStack .
  subsorts Und < Label < StackElem . ***subsorts Qid < Label < StackElem .
  subsorts Nat < Arity .
  ***subsorts EmptyList < ValRefList .

  op trap : String -> Trap [ctor] . 
  
  op label : String List{Inst} -> Label [ctor] .

  op und : -> Und [ctor] .

  op if _ else _ : List{Inst} List{Inst} -> Inst [ctor] .
  ***op EmptyList : -> EmptyList [ctor] .

  *** TODO: check associativity on funcVec...

  ***op __ : List{Inst} Stack -> WASMSim [assoc comm ctor] .
  *** < List{Inst} | Stack | Map{ValRef, Value} >
  op <_|_|_> : List{Inst} Stack Map{ValRef, Value} -> WASMSim .

  *** Map{ValRef, Value} definition
  ***op [_<-_] : ValRef Value -> Assign [ctor] .
  op EmptyLocalStore : -> Map{ValRef, Value} [ctor] .
  eq EmptyLocalStore = empty .
  ***op __ : Assign Map{ValRef, Value} -> NeLocalStore [assoc comm ctor id: EmptyLocalStore] .  *** Store[n <- v] means local n = v

  *** Module sections
  ***op (module _ _ _) : TypeVec FuncVec ExportVec -> WASMModule [ctor] .
  ***op __ : TypeDef TypeVec -> NeTypeVec [assoc ctor id: EmptyList] .
  ***op __ : FuncDef FuncVec -> NeFuncVec [assoc ctor id: EmptyList] .
  ***op __ : ExportDef ExportVec -> NeExportVec [assoc ctor id: EmptyList] .
***
  ***op (type _ _) : Id FuncType -> TypeDef [ctor] .
  ***op (func _ _ _ _) : Id FuncParamList FuncResult NeList{Inst} -> FuncDef [ctor] .
  ***op (export _ _) : Id FuncExport -> ExportDef [ctor] .

  ***op __ : InstTag ParamList -> Inst [ctor] .

  *** op __ : Param ParamList -> ParamList [assoc ctor] .

  *** Stack definition
  op EmptyStack : -> EmptyStack [ctor] .
  op _$_ : StackElem Stack -> NeStack [ctor id: EmptyStack] .

  ***op st-val : Value -> StackElem .


  *** lookup: auxiliar op to lookup values from store
  op lookup : Map{ValRef, Value} ValRef -> Value .
  ***ceq lookup([ValR2 <- Val] LocalSTR, ValR) = Val if ValR == ValR2 .
  ***ceq lookup([ValR2 <- Val] LocalSTR, ValR) = lookup(LocalSTR, ValR) if ValR =/= ValR2 .
  *** TODO: error otherwise or leave undefined??


  *** Variable definition

  vars I1 S1 : Inst .
  var ValR ValR2 : ValRef .
  var Val : Value .
  var IL IL1 IL2 : List{Inst} .
  var ST : Stack .
  var NeST : NeStack .
  var LocalSTR : Map{ValRef, Value} .
  var T : Type .
  var IntVal IntVal2 : IntValue .
  var Int1 Int2 : Int .
  var STElem : StackElem .
  var Str : String .
  var Label : Label .
  var N : Nat .

  *** Map{ValRef, Value} is a Set
  ***eq [ValR <- Val][ValR <- Val] = [ValR <- Val] .



  *** Rules
  
  *** TODO: Include validation in rules as eqs in preconditions
  *** TODO: Maybe create rules to transform an input of the form of a usual program to this representation with initial empty stack and store??

  *** local.get rule: push to stack the value from ValR from the local store
  rl [local-get] : < (local.get ValR) IL | ST | LocalSTR >   =>   < IL | st-push(ST, lookup(LocalSTR, ValR)) | LocalSTR > .

  *** local.set rule: pop value from stack and store it in ValR in the local store
  rl [local-set] : < (local.set ValR) IL | ST | LocalSTR >   =>   < IL | st-pop(ST) | insert(ValR, st-head(ST), LocalSTR) > .
  ***crl [local-set-ow] : < (local.set ValR) IL | ST | [ValR <- Val]LocalSTR >   =>   < IL | st-pop(ST) | [ValR <- st-head(ST)]LocalSTR > if Val =/= st-head(ST) .
  ***crl [local-set-ow] : < (local.set ValR) IL | ST | [ValR <- Val]LocalSTR >   =>   < IL | st-pop(ST) | [ValR <- Val]LocalSTR > if Val == st-head(ST)  .

  *** local.tee rule: pop from stack, push value from ValR two times to stack, then execute local.set ValR
  *** TODO: leave the double push like that or use a different op to double push with only one lookup ??
  rl [local.tee] : < (local.tee ValR) IL | ST | LocalSTR >   =>   < (local.set ValR) IL | st-push(st-push(st-pop(ST), lookup(LocalSTR, ValR)), lookup(LocalSTR, ValR)) | LocalSTR > .

  *** t.const rule: push Val of type T to stack
  *** TODO: maybe fix to use it as a template??
  ***rl [t.const] : < (T .const Val) IL | ST | LocalSTR >   =>   < IL | st-push(ST, Val) | LocalSTR > .
  rl [i32.const] : < (i32.const IntVal) IL | ST | LocalSTR >   =>   < IL | st-push(ST, IntVal) | LocalSTR > .

  *** ibinop: pop two int values from stack, operate and push the result to stack
  rl [i32.add] : < (i32.add) IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal + IntVal2) rem 2 ^ (32) ) | LocalSTR > .
  *** TODO: check "multiple distinct parses for statement" in sub
  ***rl [i32.sub] : < (i32.sub) IL | IntVal $ IntVal2 $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal - IntVal2) rem 2^(32)) | LocalSTR > .
  rl [i32.mul] : < (i32.mul) IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal * IntVal2) rem 2 ^ (32)) | LocalSTR > .
  *** Insts with underscores (_) need to be preprocessed so that Maude does not misinterpret the _ symbol
  crl [i32.div_u-und] : < ("i32.div_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined") if IntVal2 == 0 .
  crl [i32.div_u] : < ("i32.div_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, abs(IntVal quo IntVal2)) | LocalSTR > if IntVal2 =/= 0 .
  *** TODO: check "multiple distinct parses for statement" in div_s
  ***crl [i32.div_s-und] : < ("i32.div_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, und) | LocalSTR > if IntVal2 == 0 or (IntVal quo IntVal2) == 2 ^ (32 - 1) .
  ***crl [i32.div_s] : < ("i32.div_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, IntVal quo IntVal2) | LocalSTR > if IntVal2 =/= 0 and (IntVal quo IntVal2) =/= 2 ^ (32 - 1) .
  crl [i32.rem_u-und] : < ("i32.rem_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined")  if IntVal2 == 0 .
  crl [i32.rem_u] : < ("i32.rem_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, abs(IntVal rem IntVal2)) | LocalSTR > if IntVal2 =/= 0 .
  crl [i32.rem_s-und] : < ("i32.rem_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined") if IntVal2 == 0 .
  *** By definition: return the rem of dividing the signed representations of j1/j2 w/ the sign of j1 (design decision: compute sign of j1 as (IntVal quo abs(IntVal)))
  crl [i32.rem_s] : < ("i32.rem_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal quo abs(IntVal)) * abs((IntVal rem IntVal2))) | LocalSTR > if IntVal2 =/= 0 .

  *** Control instructions
  *** block:
  *** TODO: Think how to retrieve the IL state from the label(?)
  rl [block] : < ((block Str) IL2 end) IL | ST | LocalSTR >   =>   < IL2 end | st-push(ST, label(Str, IL)) | LocalSTR > .
  rl [end] : < end | NeST | LocalSTR >   =>   < get-inst-list-label(reset-st(NeST)) | get-st(reset-st(NeST)) | LocalSTR > .
  rl [if-else] : < (if IL1 else IL2 end) IL | IntVal $ ST | LocalSTR >   =>   < if-else(IntVal, IL1, IL2, IL) | ST | LocalSTR > .
  *** loop is an infinite loop
  rl [loop] : < ((loop Str) IL2 end) IL | ST | LocalSTR >   =>   < IL2 end | st-push(ST, label(Str, (loop Str) IL2 end)) | LocalSTR > .
  ***rl [br] : < (br N) IL | ST | LocalSTR >   =>   < IL2 end | st-push(ST, label(Str, (loop Str) IL2 end)) | LocalSTR > .

  *** lookup rule: get value from reference from local store
  rl [lookup] : lookup(LocalSTR, ValR) => LocalSTR[ValR] .


  *** List{Inst} operations 
  op head : NeList{Inst} -> Inst .
  eq head(I1 IL) = I1 .

  op tail : NeList{Inst} -> List{Inst} .
  eq tail(I1 IL) = IL .
  ***eq tail(EmptyList) = EmptyList .

  *** Stack operations
  op st-push : Stack StackElem -> NeStack .
  eq st-push(ST, STElem) = STElem $ ST .
  eq st-push(EmptyStack, STElem) = STElem $ EmptyStack .

  op st-head : NeStack -> StackElem .
  eq st-head(STElem $ ST) = STElem .

  op st-pop : NeStack -> Stack .
  eq st-pop(STElem $ ST) = ST .

  *** reset stack to eliminate label
  op _||_ : Stack Label -> StackAndLabel .
  op reset-st : Stack -> StackAndLabel .
  eq reset-st(Val $ ST) = Val $ get-st(reset-st(ST)) || und .
  eq reset-st(Label $ ST) = ST || Label .
  eq reset-st(EmptyStack) = EmptyStack || und .

  op get-inst-list-label : StackAndLabel -> List{Inst} .
  eq get-inst-list-label(ST || label(Str, IL)) = IL .

  op get-st : StackAndLabel -> Stack .
  eq get-st(ST || label(Str, IL)) = ST .

  ***op get-ith-stackandlabel : Stack Nat -> StackAndLabel .
  ***eq get-ith-stackandlabel(ST, N) = .

  op if-else : IntValue List{Inst} List{Inst} List{Inst} -> List{Inst} .
  ceq if-else(IntVal, IL1, IL2, IL) = ((block "$ifIL1") IL1 end) IL if IntVal == 0 .
  ceq if-else(IntVal, IL1, IL2, IL) = ((block "$ifIL2") IL2 end) IL if IntVal =/= 0 .
  

  *** Alt def of sub
  ***op sub _ _ : IntValue IntValue -> IntValue [ctor] .
  ***eq sub IntVal IntVal2 = IntVal - IntVal2 .

endm

