mod WASMMOD is
  *** RAFAEL MORALES PALACIOS
  
  *** IMPORT DATATYPE MODULES TO BE USED
  protecting NAT .
  protecting INT .
  
  *** Declare sorts to be used and hierarchy between them.
  sorts WASMSim WASMModule TypeVec NeTypeVec TypeDef Id FuncType FuncVec NeFuncVec FuncDef FuncParamList FuncResult FuncExport ExportVec NeExportVec ExportDef InstList NeInstList Inst EmptyList InstTag ParamList Param Stack EmptyStack NeStack ValRef .
  
  *** Simulator components
  subsorts Stack InstList < WASMSim .
  subsorts EmptyStack < Stack .

  *** Module sections sorts
  subsorts NeTypeVec EmptyList < TypeVec .
  subsorts TypeDef < NeTypeVec .
  subsorts NeFuncVec EmptyList < FuncVec .
  subsorts FuncDef < NeFuncVec .
  subsorts NeExportVec EmptyList < ExportVec .
  subsorts ExportDef < NeExportVec .

  *** Instruction lists sorts
  subsorts NeInstList EmptyList < InstList .
  subsorts Inst < NeInstList NeStack .
  *** TODO: Maybe not needed: 
  subsorts Param < ParamList .
  *** TODO: Include variable references as ValRef 
  subsorts Nat < ValRef .

  op EmptyList : -> EmptyList [ctor] .

  *** TODO: check associativity on funcVec...

  *** Module sections
  op (module _ _ _) : TypeVec FuncVec ExportVec -> WASMModule [ctor] .
  op __ : TypeDef TypeVec -> NeTypeVec [assoc ctor id: EmptyList] .
  op __ : FuncDef FuncVec -> NeFuncVec [assoc ctor id: EmptyList] .
  op __ : ExportDef ExportVec -> NeExportVec [assoc ctor id: EmptyList] .

  op (type _ _) : Id FuncType -> TypeDef [ctor] .
  op (func _ _ _ _) : Id FuncParamList FuncResult NeInstList -> FuncDef [ctor] .
  op (export _ _) : Id FuncExport -> ExportDef [ctor] .

  
  *** InstList is a List of Instructions

  op __ : Inst InstList -> NeInstList [assoc ctor id: EmptyList] .
  
  ***op __ : InstTag ParamList -> Inst [ctor] .

  *** op __ : Param ParamList -> ParamList [assoc ctor] .

  op local.get _ : ValRef -> Inst [ctor] .
  op local.set _ : ValRef -> Inst [ctor] .

  *** Stack ops
  op EmptyStack : -> EmptyStack [ctor] .
  op [__] : Inst InstList -> NeStack [ctor id: EmptyStack] .

  var I1 S1 : Inst .
  var IL : InstList .
  var ST : Stack .

  *** TODO: The stack should store values/refs not insts
  *** rl [push-stack] : (I1 IL) ST => IL push(ST, I1) .

  op head : InstList -> Inst .
  eq head(I1 IL) = I1 .

  op tail : InstList -> InstList .
  eq tail(I1 IL) = IL .
  eq tail(EmptyList) = EmptyList .

  op push : Stack Inst -> Stack .
  eq push(ST, I1) = [I1 ST] .


  

endm

