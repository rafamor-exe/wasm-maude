fmod WASM-TYPETOKEN-MOD is

  sorts TypeToken .

  ops i32 i64 : -> TypeToken [ctor] .

endfm

view TypeToken from TRIV to WASM-TYPETOKEN-MOD is
  sort Elt to TypeToken .
endv

fmod WASM-FUNCTYPE-MOD is

  protecting WASM-TYPETOKEN-MOD .
  protecting LIST{TypeToken} .

  sorts ParamType ResultType .

  *** NOTE: List{TypeToken} needs to be wrapped on parenthesis for Maude to parse it correctly
  op (param _) : List{TypeToken} -> ParamType [ctor] .
  op (result _) : List{TypeToken} -> ResultType [ctor] .


endfm

view ParamType from TRIV to WASM-FUNCTYPE-MOD is
  sort Elt to ParamType .
endv
view ResultType from TRIV to WASM-FUNCTYPE-MOD is
  sort Elt to ResultType .
endv

fmod WASM-TYPEDEF-MOD is

  protecting NAT .
  protecting WASM-FUNCTYPE-MOD .
  protecting LIST{ParamType} .
  protecting LIST{ResultType} .

  sorts TypeDef Id FuncType ParamResultFuncType .
  subsorts Id < Nat .

  *** TODO: (for syntax reasons) be able to declare only param or result or none (now nil is required)
  ***op _ _ : List{ParamType} List{ResultType} -> ParamResultFuncType [ctor] .
  ***op _ : List{ParamType} -> ParamResultFuncType [ctor] .
  ***op _ : List{ResultType} -> ParamResultFuncType [ctor] .

  ***op (func _) : ParamResultFuncType -> FuncType [ctor] .
  op (func _ _) : List{ParamType} List{ResultType} -> FuncType [ctor] .

  op (type _ _) : Id FuncType -> TypeDef [ctor] .

endfm

view TypeDef from TRIV to WASM-TYPEDEF-MOD is
  sort Elt to TypeDef .
endv

fmod WASM-VALREF-MOD is

  protecting NAT .
  protecting QID .

  sorts ValRef Addr .

  subsorts Nat Qid < ValRef .
  subsorts Nat < Addr .

endfm

view Addr from TRIV to WASM-VALREF-MOD is
  sort Elt to Addr .
endv

fmod WASM-VALUE-MOD is

  protecting INT .

  sorts Value IntValue .

  subsorts Int < IntValue < Value .

endfm

fmod WASM-GLOBALINSTANCE-MOD is
  
  protecting WASM-TYPETOKEN-MOD .
  protecting WASM-VALUE-MOD .

  sorts GlobalInstance GlobalType MutGlobalType .
  subsorts MutGlobalType < GlobalType .

  *** Included mut because of emscripten-compiled example. Not included in the standard...
  op const_ : TypeToken -> GlobalType [ctor] .
  ops var_ mut_ : TypeToken -> MutGlobalType [ctor] .

  op {type _, value _} : GlobalType Value -> GlobalInstance [ctor] .

endfm

view GlobalInstance from TRIV to WASM-GLOBALINSTANCE-MOD is
  sort Elt to GlobalInstance .
endv

fmod WASM-INST-MOD is

  protecting WASM-TYPETOKEN-MOD .
  protecting WASM-VALREF-MOD .
  protecting WASM-VALUE-MOD .

  sorts Inst .

  *** Instruction ops declarations
  op local.get _ : ValRef -> Inst [ctor] .
  op local.set _ : ValRef -> Inst [ctor] .
  op local.tee _ : ValRef -> Inst [ctor] .

  *** global insts
  op global.get _ : String -> Inst [ctor] .
  op global.set _ : String -> Inst [ctor] .

  *** TODO: maybe fix to use it as a template??
  *** - The problem is that I think Maude obligues to separate the tokens so it would be like "i32 .const, not i32.const"
  ***op _.const _ : TypeToken Value -> Inst [ctor] .
  op i32.const _ : IntValue -> Inst [ctor] .
  *** TODO: Include more valid types
  ***ops i32 : -> Type [ctor] .


  *** binop (Binary Operations)
  *** ibinop (Integer binop) - add | sub | mul | div_sx | rem_sx | and | or | xor | shl | shr_sx | rotl | rotr
  op i32.add : -> Inst [ctor] .
  op i32.sub : -> Inst [ctor] .
  op i32.mul : -> Inst [ctor] .
  *** Insts with underscores (_) need to be preprocessed so that Maude does not misinterpret the _ symbol
  op "i32.div_u" : -> Inst [ctor] .
  op "i32.div_s" : -> Inst [ctor] .
  op "i32.rem_u" : -> Inst [ctor] .
  op "i32.rem_s" : -> Inst [ctor] .

  *** relop
  op i32.eq : -> Inst [ctor] .
  op i32.ne : -> Inst [ctor] .
  op "i32.lt_s" : -> Inst [ctor] .
  op "i32.lt_u" : -> Inst [ctor] .
  op "i32.gt_s" : -> Inst [ctor] .
  op "i32.gt_u" : -> Inst [ctor] .
  op "i32.le_s" : -> Inst [ctor] .
  op "i32.le_u" : -> Inst [ctor] .
  op "i32.ge_s" : -> Inst [ctor] .
  op "i32.ge_u" : -> Inst [ctor] .

  *** testop
  op i32.eqz : -> Inst [ctor] .

  *** Control Instructions
  op nop : -> Inst [ctor] .
  op unreachable : -> Inst [ctor] .

  op block _ : String -> Inst [ctor] .
  op loop _ : String -> Inst [ctor] .
  op br _ : Nat -> Inst [ctor] .
  op "br_if" _ : Nat -> Inst [ctor] .
  op end : -> Inst [ctor] .

endfm

view Inst from TRIV to WASM-INST-MOD is
  sort Elt to Inst .
endv

view ValRef from TRIV to WASM-VALREF-MOD is
  sort Elt to ValRef .
endv

view Value from TRIV to WASM-VALUE-MOD is
  sort Elt to Value .
endv

fmod WASM-FUNCDEF-MOD is

  protecting WASM-TYPEDEF-MOD .
  protecting LIST{Inst} .

  sorts FuncDef TypeRef .

  op (type _) : Id -> TypeRef [ctor] .

  *** TODO: look for a way of making ParamType and ResultType lists optional
  op (func _ _ _ _ _) : Id TypeRef List{ParamType} List{ResultType} List{Inst} -> FuncDef [ctor] .

endfm

view FuncDef from TRIV to WASM-FUNCDEF-MOD is
  sort Elt to FuncDef .
endv

mod WASMMOD is
  *** RAFAEL MORALES PALACIOS - TFM - SEMANTICS OF WEBASSEMBLY IN MAUDE
  
  *** IMPORT DATATYPE MODULES TO BE USED
  ***protecting NAT .
  ***protecting INT .
  ***protecting STRING .
  ***protecting QID .
  protecting WASM-INST-MOD .
  protecting LIST{Inst} .
  protecting MAP{ValRef, Value} .
  protecting MAP{String, Addr} .
  protecting MAP{Addr, GlobalInstance} .

  protecting WASM-TYPEDEF-MOD .
  protecting LIST{TypeDef} .
  protecting WASM-FUNCDEF-MOD .
  protecting LIST{FuncDef} .

  
  
  *** Declare sorts to be used and hierarchy between them.
  sorts WASMSim WASMGlobalSim WASMLocalSim WASMModule FuncExport ExportVec NeExportVec ExportDef Stack EmptyStack NeStack StackElem EmptyLocalStore NeLocalStore Assign Und Trap Arity Label StackAndLabel FuncStore .
  
  *** Simulator components
  subsorts Stack List{Inst} < WASMLocalSim .
  subsorts EmptyStack NeStack < Stack .
  subsorts EmptyLocalStore NeLocalStore < Map{ValRef, Value} .
  subsorts Assign < NeLocalStore .

  *** Instruction lists sorts
  subsorts Trap < Inst .
  *** TODO: Include variable references as ValRef 
  *** Temporal solution: Use Qid, forces to use ' before the token...check to use $ instead
  ***subsorts Nat Qid < ValRef < NeValRefList < ValRefList .
  *** TODO: Include support for Labels and Activations as Stack values. Problem: collision of operator definition on Nat and String
  *** Temporal solution: Use Qid, forces to use ' before the token...check to use $ instead
  subsorts Value < StackElem < NeStack . ***subsorts Int Und < IntValue < Value < StackElem < NeStack .
  subsorts Und < Label < StackElem . ***subsorts Qid < Label < StackElem .
  subsorts Nat < Arity .

  op trap : String -> Trap [ctor] . 
  
  op label : String List{Inst} -> Label [ctor] .

  op und : -> Und [ctor] .

  op if _ else _ : List{Inst} List{Inst} -> Inst [ctor] .
  ***op EmptyList : -> EmptyList [ctor] .


  *** Local environment
  *** < InstList(List{Inst}) | Stack | LocalStore(Map{ValRef, Value}) >
  op <_|_|_> : List{Inst} Stack Map{ValRef, Value} -> WASMLocalSim [ctor] .

  *** Global environment
  *** WASMLocalSim # GlobalAddrs(Map{ValRef, Nat} <-> GlobalStore(Map{ValRef, Value})
  op _ # _ <-> _ : WASMLocalSim Map{String, Addr} Map{Addr, GlobalInstance} -> WASMGlobalSim [ctor] .

  *** WASM Simulator
  *** # WASMModule # WASMGlobalSim # FuncStore #
  op # _ # _ # _ # : WASMModule WASMGlobalSim FuncStore -> WASMSim [ctor] .
  

  *** Map{ValRef, Value} definition
  ***op [_<-_] : ValRef Value -> Assign [ctor] .
  op EmptyLocalStore : -> Map{ValRef, Value} [ctor] .
  eq EmptyLocalStore = empty .
  ***op __ : Assign Map{ValRef, Value} -> NeLocalStore [assoc comm ctor id: EmptyLocalStore] .  *** Store[n <- v] means local n = v

  *** Module sections
  *** TODO: complete module parts (global, exports, etc.)
  op (module _ _) : List{TypeDef} List{FuncDef} -> WASMModule [ctor] .

  ***op __ : ExportDef ExportVec -> NeExportVec [assoc ctor id: EmptyList] .

  ***op (export _ _) : Id FuncExport -> ExportDef [ctor] .


  *** Stack definition
  op EmptyStack : -> EmptyStack [ctor] .
  op _$_ : StackElem Stack -> NeStack [ctor id: EmptyStack] .


  *** lookup: auxiliar op to lookup values from store
  op lookup : Map{ValRef, Value} ValRef -> Value .
  ***ceq lookup([ValR2 <- Val] LocalSTR, ValR) = Val if ValR == ValR2 .
  ***ceq lookup([ValR2 <- Val] LocalSTR, ValR) = lookup(LocalSTR, ValR) if ValR =/= ValR2 .
  *** TODO: error otherwise or leave undefined??
  op jump-to-L : StackAndLabel -> Inst [ctor] .


  *** Variable definition

  vars I1 S1 : Inst .
  var ValR ValR2 : ValRef .
  var Val Val1 Val2 : Value .
  var IL IL1 IL2 : List{Inst} .
  var ST TempST ST1 : Stack .
  var NeST : NeStack .
  var LocalSTR : Map{ValRef, Value} .
  var T : TypeToken .
  var IntVal IntVal1 IntVal2 : IntValue .
  var Int1 Int2 : Int .
  var STElem : StackElem .
  var Str : String .
  var Label : Label .
  var N : Nat .
  var GlobalAddrs : Map{String, Addr} .
  var GlobalsStore : Map{Addr, GlobalInstance} .
  var GlobalType : GlobalType .
  var MutGlobalType : MutGlobalType .
  var GlobalInstance : GlobalInstance .
  var Addr : Addr .

  *** Map{ValRef, Value} is a Set
  ***eq [ValR <- Val][ValR <- Val] = [ValR <- Val] .



  *** Rules
  
  *** TODO: Include validation in rules as eqs in preconditions
  *** TODO: Maybe create rules to transform an input of the form of a usual program to this representation with initial empty stack and store??

  *** local.get rule: push to stack the value from ValR from the local store
  rl [local.get] : < (local.get ValR) IL | ST | LocalSTR >   =>   < IL | st-push(ST, lookup(LocalSTR, ValR)) | LocalSTR > .

  *** local.set rule: pop value from stack and store it in ValR in the local store
  rl [local.set] : < (local.set ValR) IL | ST | LocalSTR >   =>   < IL | st-pop(ST) | insert(ValR, st-head(ST), LocalSTR) > .
  ***crl [local-set-ow] : < (local.set ValR) IL | ST | [ValR <- Val]LocalSTR >   =>   < IL | st-pop(ST) | [ValR <- st-head(ST)]LocalSTR > if Val =/= st-head(ST) .
  ***crl [local-set-ow] : < (local.set ValR) IL | ST | [ValR <- Val]LocalSTR >   =>   < IL | st-pop(ST) | [ValR <- Val]LocalSTR > if Val == st-head(ST)  .

  *** local.tee rule: pop from stack, push value from ValR two times to stack, then execute local.set ValR
  *** TODO: leave the double push like that or use a different op to double push with only one lookup ??
  rl [local.tee] : < (local.tee ValR) IL | ST | LocalSTR >   =>   < (local.set ValR) IL | st-push(st-push(st-pop(ST), lookup(LocalSTR, ValR)), lookup(LocalSTR, ValR)) | LocalSTR > .

  *** global variable rules

  rl [global.get] : < (global.get Str) IL | ST | LocalSTR > # GlobalAddrs <-> GlobalsStore
                  =>   
                  < IL | st-push(ST, global-val(GlobalsStore[GlobalAddrs[Str]])) | LocalSTR > # GlobalAddrs <-> GlobalsStore .

  rl [global.set] : < (global.set Str) IL | Val $ ST | LocalSTR > # GlobalAddrs <-> GlobalsStore
                  =>   
                  < IL | ST | LocalSTR > # GlobalAddrs <-> insert-gb-val(GlobalAddrs[Str], Val, GlobalsStore) .



  *** t.const rule: push Val of type T to stack
  *** TODO: maybe fix to use it as a template??
  ***rl [t.const] : < (T .const Val) IL | ST | LocalSTR >   =>   < IL | st-push(ST, Val) | LocalSTR > .
  rl [i32.const] : < (i32.const IntVal) IL | ST | LocalSTR >   =>   < IL | st-push(ST, IntVal) | LocalSTR > .

  *** ibinop: pop two int values from stack, operate and push the result to stack
  rl [i32.add] : < (i32.add) IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal + IntVal2) rem 2 ^ (32) ) | LocalSTR > .
  *** TODO: check "multiple distinct parses for statement" in sub
  ***rl [i32.sub] : < (i32.sub) IL | IntVal $ IntVal2 $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal - IntVal2) rem 2^(32)) | LocalSTR > .
  rl [i32.mul] : < (i32.mul) IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal * IntVal2) rem 2 ^ (32)) | LocalSTR > .
  *** Insts with underscores (_) need to be preprocessed so that Maude does not misinterpret the _ symbol
  crl [i32.div_u-und] : < ("i32.div_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined") if IntVal2 == 0 .
  crl [i32.div_u] : < ("i32.div_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, abs(IntVal quo IntVal2)) | LocalSTR > if IntVal2 =/= 0 .
  *** TODO: check "multiple distinct parses for statement" in div_s
  ***crl [i32.div_s-und] : < ("i32.div_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, und) | LocalSTR > if IntVal2 == 0 or (IntVal quo IntVal2) == 2 ^ (32 - 1) .
  ***crl [i32.div_s] : < ("i32.div_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, IntVal quo IntVal2) | LocalSTR > if IntVal2 =/= 0 and (IntVal quo IntVal2) =/= 2 ^ (32 - 1) .
  crl [i32.rem_u-und] : < ("i32.rem_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined")  if IntVal2 == 0 .
  crl [i32.rem_u] : < ("i32.rem_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, abs(IntVal rem IntVal2)) | LocalSTR > if IntVal2 =/= 0 .
  crl [i32.rem_s-und] : < ("i32.rem_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   trap("Binop result undefined") if IntVal2 == 0 .
  *** By definition: return the rem of dividing the signed representations of j1/j2 w/ the sign of j1 (design decision: compute sign of j1 as (IntVal quo abs(IntVal)))
  crl [i32.rem_s] : < ("i32.rem_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   =>   < IL | st-push(ST, (IntVal quo abs(IntVal)) * abs((IntVal rem IntVal2))) | LocalSTR > if IntVal2 =/= 0 .

  *** irelop
  rl [ieq] : < (i32.eq) IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | ieq(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ine] : < (i32.ne) IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | ine(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ilt_s] : < ("i32.lt_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ilt_s"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ilt_u] : < ("i32.lt_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ilt_u"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [igt_s] : < ("i32.gt_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "igt_s"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [igt_u] : < ("i32.gt_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "igt_u"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ile_s] : < ("i32.le_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ile_s"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ile_u] : < ("i32.le_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ile_u"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ige_s] : < ("i32.ge_s") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ige_s"(IntVal, IntVal2) $ ST | LocalSTR > .
  rl [ige_u] : < ("i32.ge_u") IL | IntVal2 $ IntVal $ ST | LocalSTR >   
            =>   
            < IL | "ige_u"(IntVal, IntVal2) $ ST | LocalSTR > .

  *** testop
  rl [eqz] : < (i32.eqz) IL | IntVal $ ST | LocalSTR >   
            =>   
            < IL | ieq(IntVal, 0) $ ST | LocalSTR > .

  *** Control instructions
  *** block:
  *** TODO: Check what to do with values on stack previous to label. Should label be after some values? How to calculate it?
  rl [block] : < ((block Str) IL2 end) IL | ST | LocalSTR >   =>   < IL2 end | st-push(ST, label(Str, IL)) | LocalSTR > .
  rl [end] : < end | NeST | LocalSTR >   =>   < get-inst-list-label(reset-st(NeST)) | get-st(reset-st(NeST)) | LocalSTR > .
  rl [if-else] : < (if IL1 else IL2 end) IL | IntVal $ ST | LocalSTR >   =>   < if-else(IntVal, IL1, IL2, IL) | ST | LocalSTR > .
  *** loop is an infinite loop
  rl [loop] : < ((loop Str) IL2 end) IL | ST | LocalSTR >   =>   < IL2 end | st-push(ST, label(Str, (loop Str) IL2 end)) | LocalSTR > .
  rl [br] : < (br N) IL | ST | LocalSTR >   
            =>   
            < jump-to-L(get-ith-stackandlabel(ST, N, EmptyStack)) IL end | ST | LocalSTR > .
  rl [jump-to-L] : < jump-to-L(ST1 || label(Str, IL1)) IL | ST | LocalSTR > 
                  =>
                  < IL1 | ST1 | LocalSTR > .
  crl [br_if] : < ("br_if" N) IL | IntVal $ ST | LocalSTR >
               =>   
               < (br N) IL | ST | LocalSTR > if IntVal =/= 0 .
  crl [br_if-else] : < ("br_if" N) IL | IntVal $ ST | LocalSTR >
              =>   
              < IL | ST | LocalSTR > if IntVal == 0 .


  *** lookup rule: get value from reference from local store
  rl [lookup] : lookup(LocalSTR, ValR) => LocalSTR[ValR] .


  *** List{Inst} operations 
  op head : NeList{Inst} -> Inst .
  eq head(I1 IL) = I1 .

  op tail : NeList{Inst} -> List{Inst} .
  eq tail(I1 IL) = IL .
  ***eq tail(EmptyList) = EmptyList .

  *** Stack operations
  op st-push : Stack StackElem -> NeStack .
  eq st-push(ST, STElem) = STElem $ ST .
  eq st-push(EmptyStack, STElem) = STElem $ EmptyStack .

  op st-head : NeStack -> StackElem .
  eq st-head(STElem $ ST) = STElem .

  op st-pop : NeStack -> Stack .
  eq st-pop(STElem $ ST) = ST .

  op st-rev : Stack -> Stack .
  eq st-rev(STElem $ ST) = st-rev(ST) $ STElem .
  eq st-rev(EmptyStack) = EmptyStack .

  *** Globals auxiliary ops
  op global-val : GlobalInstance -> Value .
  eq global-val({type GlobalType, value Val}) = Val .

  op global-type : GlobalInstance -> GlobalType .
  eq global-type({type GlobalType, value Val}) = GlobalType .

  *** Only change value if it is marked as mutable (mut/var) global variable (due to validation requirements).
  op insert-gb-val : Addr Value Map{Addr, GlobalInstance} -> Map{Addr, GlobalInstance} .
  eq insert-gb-val(Addr, Val2, (Addr |-> {type MutGlobalType, value Val1}, GlobalsStore)) = (Addr |-> {type MutGlobalType, value Val2}, GlobalsStore) .

  *** reset stack to eliminate label
  op _||_ : Stack Label -> StackAndLabel .
  op reset-st : Stack -> StackAndLabel .
  eq reset-st(Val $ ST) = Val $ get-st(reset-st(ST)) || get-label(reset-st(ST)) .
  eq reset-st(Label $ ST) = ST || Label .
  eq reset-st(EmptyStack) = EmptyStack || und .

  op get-inst-list-label : StackAndLabel -> List{Inst} .
  eq get-inst-list-label(ST || label(Str, IL)) = IL .

  op get-st : StackAndLabel -> Stack .
  eq get-st(ST || Label) = ST .
  eq get-st(ST || und) = ST .

  op get-label : StackAndLabel -> Label .
  eq get-label(ST || Label) = Label .
  eq get-label(ST || und) = und .

  op get-ith-stackandlabel : Stack Nat Stack -> StackAndLabel .
  eq get-ith-stackandlabel(Val $ ST, N, TempST) = get-ith-stackandlabel(ST, N, Val $ TempST) .
  *** TODO: check multiple parses warning
  ceq get-ith-stackandlabel(Label $ ST, N, TempST) = get-ith-stackandlabel(ST, N - 1, TempST) if N > 0 .
  ceq get-ith-stackandlabel(Label $ ST, N, TempST) = TempST $ ST || Label if N == 0 .

  op if-else : IntValue List{Inst} List{Inst} List{Inst} -> List{Inst} .
  ceq if-else(IntVal, IL1, IL2, IL) = ((block "$ifIL1") IL1 end) IL if IntVal == 0 .
  ceq if-else(IntVal, IL1, IL2, IL) = ((block "$ifIL2") IL2 end) IL if IntVal =/= 0 .
  
  *** Auxiliary eq for logic instructions
  op ieq : IntValue IntValue -> IntValue .
  ceq ieq(IntVal1, IntVal2) = 1 if IntVal1 == IntVal2 .
  eq ieq(IntVal1, IntVal2) = 0 [owise] .
  
  op ine : IntValue IntValue -> IntValue .
  ceq ine(IntVal1, IntVal2) = 1 if IntVal1 =/= IntVal2 .
  eq ine(IntVal1, IntVal2) = 0 [owise] .
  
  op "ilt_u" : IntValue IntValue -> IntValue .
  ceq "ilt_u"(IntVal1, IntVal2) = 1 if abs(IntVal1) < abs(IntVal2) .
  eq "ilt_u"(IntVal1, IntVal2) = 0 [owise] .
  
  op "ilt_s" : IntValue IntValue -> IntValue .
  ceq "ilt_s"(IntVal1, IntVal2) = 1 if IntVal1 < IntVal2 .
  eq "ilt_s"(IntVal1, IntVal2) = 0 [owise] .
  
  op "igt_u" : IntValue IntValue -> IntValue .
  ceq "igt_u"(IntVal1, IntVal2) = 1 if abs(IntVal1) > abs(IntVal2) .
  eq "igt_u"(IntVal1, IntVal2) = 0 [owise] .
  
  op "igt_s" : IntValue IntValue -> IntValue .
  ceq "igt_s"(IntVal1, IntVal2) = 1 if IntVal1 > IntVal2 .
  eq "igt_s"(IntVal1, IntVal2) = 0 [owise] .

  op "ile_u" : IntValue IntValue -> IntValue .
  ceq "ile_u"(IntVal1, IntVal2) = 1 if abs(IntVal1) <= abs(IntVal2) .
  eq "ile_u"(IntVal1, IntVal2) = 0 [owise] .
  
  op "ile_s" : IntValue IntValue -> IntValue .
  ceq "ile_s"(IntVal1, IntVal2) = 1 if IntVal1 <= IntVal2 .
  eq "ile_s"(IntVal1, IntVal2) = 0 [owise] .
  
  op "ige_u" : IntValue IntValue -> IntValue .
  ceq "ige_u"(IntVal1, IntVal2) = 1 if abs(IntVal1) >= abs(IntVal2) .
  eq "ige_u"(IntVal1, IntVal2) = 0 [owise] .
  
  op "ige_s" : IntValue IntValue -> IntValue .
  ceq "ige_s"(IntVal1, IntVal2) = 1 if IntVal1 >= IntVal2 .
  eq "ige_s"(IntVal1, IntVal2) = 0 [owise] .

endm

