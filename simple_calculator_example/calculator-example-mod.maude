fmod CALCULATOR-OPS is
        protecting INT .
        sort Value .
    
        op val : Int -> Value [ctor] .
        ops add sub div : Value Value -> Value .
    
        vars I1 I2 : Int .
        var NzI : NzInt .
        eq add(val(I1), val(I2)) = val(I1 + I2) .
        eq sub(val(I1), val(I2)) = val(I1 - I2) .
        eq div(val(I1), val(NzI)) = val(I1 quo NzI) .
endfm

mod CALCULATOR is
        protecting CALCULATOR-OPS .
        protecting META-LEVEL .
        sorts Calculator Op .
        sorts EmptyOpList NeOpList OpList .
        subsort EmptyOpList NeOpList < OpList .
        subsort Op < NeOpList .

        ops add_; sub_; div_; : Int -> Op [ctor] .
        op null : -> EmptyOpList [ctor] .
        op __ : Op OpList -> NeOpList [ctor right id: null] .
        op < _ | _ > : OpList Value -> Calculator [ctor] .
        op init : OpList -> Calculator .
        
        var OpL : OpList .
        var I : Int .
        var V : Value .

        eq init(OpL) = < OpL | val(0) > .
        
        rl [add] : < add I ; OpL | V > => < OpL | add(V, val(I)) > .
        rl [sub] : < sub I ; OpL | V > => < OpL | sub(V, val(I)) > .
        crl [div] : < div I ; OpL | V > => < OpL | div(V, val(I)) >
            if I =/= 0 .
endm