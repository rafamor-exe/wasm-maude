mod WASM-TEST-MOD is

  protecting WASMMOD .

  op run-factorial : -> WASMSimTrigger .
  op run-int-binop-trap : -> WASMSimTrigger .
  op run-float-unop-sqrt : -> WASMSimTrigger .
  op run-shOp : -> WASMSimTrigger .
  op run-br-test : -> WASMSimTrigger .
  eq run-factorial = run-module-func(
                                    (module 
                                      (type "type0" (func (result i32)))
                                      (type "type1" (func (param i32) (result i32)))
                                      (func "start"
                                      (local i32)
                                        (
                                            i32 .const 5
                                            global.set "gb1"
                                            global.get "gb1"
                                            call "factorial"
                                            global.set "result"
                                        )
                                        end)
                                      (func "factorial" (type "type1")
                                      (local i32)
                                        (
                                            i32 .const 0
                                            local.get 0
                                            i32 . eq
                                            (if (i32)
                                                i32 .const 1
                                            else
                                                local.get 0
                                                local.get 0
                                                i32 .const 1
                                                i32 . sub
                                                call "factorial"
                                                i32 . mul
                                            end)
                                        )
                                        end)
                                      (global "gb1" (mut i32) (i32 .const 1))
                                      (global "result" (mut i32) (i32 .const 1))
                                    )
                                    ,"start") .
  
    eq run-br-test = run-module-func(
                                    (module 
                                      (type "type0" (func (result i32)))
                                      (type "type1" (func (param i32) (result i32)))
                                      (type "$type2" (func (param i32) (result i32)))
                                      (func "start"
                                      (local i32)
                                        (
                                            i32 .const 5
                                            global.set "gb1"
                                            global.get "gb1"
                                            (block (type "$type2")
                                            br 0
                                            call "test"
                                            end)
                                            global.set "result"
                                        )
                                        end)
                                      (func "test" (type "type1")
                                      (local i32)
                                        (
                                            local.get 0
                                        )
                                        end)
                                      (global "gb1" (mut i32) (i32 .const 1))
                                      (global "result" (mut i32) (i32 .const 1))
                                    )
                                    ,"start") .

  eq run-int-binop-trap = run-module-func(
                                          (module 
                                            (type "type0" (func ((result i32))))
                                            (type "type1" (func ((param (i32 i32)) (result i32))))
                                            (func "start"
                                            (local i32 i32)
                                              (
                                                  (i32 .const 10)
                                                  (global.set "dividend")
                                                  (i32 .const 0)
                                                  (global.set "divisor")
                                                  (global.get "dividend")
                                                  (global.get "divisor")
                                                  (call "floatdiv")
                                                  (global.set "result")
                                              )
                                              end)
                                            (func "floatdiv" ((type "type1"))
                                            (local nil)
                                              (
                                                  (local.get 1)
                                                  (local.get 0)
                                                  (i32 . div~s)
                                              )
                                              end)
                                            (global "dividend" (mut i32) (i32 .const 1))
                                            (global "divisor" (mut i32) (i32 .const 1))
                                            (global "result" (mut i32) (i32 .const 1)))
                                          , "start") .

  eq run-float-unop-sqrt = run-module-func(
                                          (module 
                                            (type "type0" (func ((result f32))))
                                            (type "type1" (func ((param f32) (result f32))))
                                            (func "start"
                                            (local i32)
                                              (
                                                  (f32 .const 10)
                                                  (global.set "operand")
                                                  (global.get "operand")
                                                  (call "floatsqrt")
                                                  (global.set "result")
                                              )
                                              end)
                                            (func "floatsqrt" ((type "type1"))
                                            (local (f32))
                                              (
                                                  (local.get 0)
                                                  (f32 . sqrt)
                                              )
                                              end)
                                            (global "operand" (mut f32) (f32 .const 1))
                                            (global "result" (mut f32) (f32 .const 1)))
                                          , "start") .

  eq run-shOp = run-module-func(
                                (module 
                                  (type "type0" (func ((result i32))))
                                  (type "type1" (func ((param i32 i32) (result i32))))
                                  (func "start"
                                  (local i32)
                                    (
                                        (i32 .const 8)
                                        (global.set "operand1")
                                        (i32 .const 1)
                                        (global.set "operand2")

                                        (global.get "operand2")
                                        (global.get "operand1")
                                        (call "shl")
                                        (global.set "result1")
                                        
                                        (global.get "operand2")
                                        (global.get "operand1")
                                        (call "shr_u")
                                        (global.set "result2")
                                        
                                        (global.get "operand2")
                                        (global.get "operand1")
                                        (call "shr_s")
                                        (global.set "result3")
                                    )
                                    end)
                                  (func "shl" ((type "type1"))
                                  (local (i32 i32))
                                    (
                                        (local.get 0)
                                        (local.get 1)
                                        (i32 . shl)
                                    )
                                    end)
                                  (func "shr_u" ((type "type1"))
                                  (local (i32 i32))
                                    (
                                        (local.get 0)
                                        (local.get 1)
                                        (i32 . shr~u)
                                    )
                                    end)
                                  (func "shr_s" ((type "type1"))
                                  (local (i32 i32))
                                    (
                                        (local.get 0)
                                        (local.get 1)
                                        (i32 . shr~s)
                                    )
                                    end)
                                  (global "operand1" (mut i32) (i32 .const 1))
                                  (global "operand2" (mut i32) (i32 .const 1))
                                  (global "result1" (mut i32) (i32 .const 1))
                                  (global "result2" (mut i32) (i32 .const 1))
                                  (global "result3" (mut i32) (i32 .const 1)))
                                , "start") .

endm