(module
  (type $0 (func (param i32 i32 i32) (result i32)))
  (type $2 (func (result i32)))
  (type $3 (func (result i64)))
  (type $4 (func (result f32)))
  (type $5 (func (result f64)))
  (type $6 (func (param i32) (result i32)))
  (type $7 (func (param i32)))
  (type $8 (func (param i32 i32)))
  (func $0 nop)
  (func $11 (type $7) (block (call 0) (call 0) (local.get 0) (br_if 0) end))
  (func $12
    (type $6)
    (block
      (result i32)
      (i32.const 10)
      (local.get 0)
      (br_if 0)
      (drop)
      (i32.const 11)
    end)
  )
  (func $13
    (type $6)
    (block
      (result i32)
      (call 0)
      (i32.const 20)
      (local.get 0)
      (br_if 0)
      (drop)
      (i32.const 21)
    end)
  )
  (func $14
    (type $6)
    (block
      (result i32)
      (call 0)
      (call 0)
      (i32.const 11)
      (local.get 0)
      (br_if 0)
    end)
  )
  
  (func $17 (type $7) (loop (call 0) (local.get 0) (br_if 1) end))

  (func $26
    (type $6)
    (block
      (result i32)
      (i32.const 1)
      (local.get 0)
      (br_if 0)
      (if (result i32) ( (i32.const 2)) (else (i32.const 3)) end)
    end)
  )
  (func $27
    (type $8)
    (block (local.get 0) (if (local.get 1) (br_if 1) else (call 0) end) end)
  )
  (func $28
    (type $8)
    (block (local.get 0) (if ( (call 0)) (else (local.get 1) (br_if 1)) end) end)
  )
  (export "as-block-last" (func 11))
  (export "as-block-first-value" (func 12))
  (export "as-block-mid-value" (func 13))
  (export "as-block-last-value" (func 14))
  (export "as-loop-last" (func 17))
  (export "as-if-cond" (func 26))
  (export "as-if" (func 27))
  (export "as-if-else" (func 28))
)
