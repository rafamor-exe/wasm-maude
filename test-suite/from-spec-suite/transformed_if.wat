(module
  (type $0 (func (param i32 i32) (result i32)))
  (type $2 (func (result i32)))
  (type $3 (func (param i32)))
  (type $4 (func (param i32 f64 i32) (result i32 f64 i32)))
  (type $5 (func (param i32) (result i32)))
  (type $6 (func (param i32) (result i32 i32)))
  (type $7 (func (result i32 i64 i32)))
  (func $0 nop)
  (func $1
    (type $3)
    (local.get 0)
    (if nop else nop end)
    (local.get 0)
    (if nop else nop end)
    (local.get 0)
    (if nop else nop end)
    (local.get 0)
    (if nop else nop end)
  )
  (func $2
    (type $5)
    (local.get 0)
    (if ( (nop)) else nop end)
    (local.get 0)
    (if ( (nop)) (else (nop)) end)
    (local.get 0)
    (if (result i32) ( (i32.const 7)) (else (i32.const 8)) end)
  )
  (func $3
    (type $6)
    (local.get 0)
    (if ( (call 0) (call 0) (call 0)) else nop end)
    (local.get 0)
    (if  (else (call 0) (call 0) (call 0)) end)
    (local.get 0)
    (if
      (result i32)
      ( (call 0) (call 0) (i32.const 8) (call 0))
      (else (call 0) (call 0) (i32.const 9) (call 0))
    end )
    (local.get 0)
    (if
      (type $7)
      (
        (call 0)
        (call 0)
        (i32.const 1)
        (call 0)
        (call 0)
        (call 0)
        (i64.const 2)
        (call 0)
        (call 0)
        (call 0)
        (i32.const 3)
        (call 0)
      )
      (else
        (call 0)
        (call 0)
        (i32.const -1)
        (call 0)
        (call 0)
        (call 0)
        (i64.const -2)
        (call 0)
        (call 0)
        (call 0)
        (i32.const -3)
        (call 0)
      )
    end)
    (drop)
    (drop)
  )
  (export "empty" (func 1))
  (export "singular" (func 2))
  (export "multi" (func 3))
)
