(module
  (type $0 (func (param i32 i32) (result i32)))
  (type $2 (func (result i32)))
  (type $3 (func (param i32)))
  (type $4 (func (param i32 f64 i32) (result i32 f64 i32)))
  (type $5 (func (result i32 i64 i32)))
  (type $6 (func (param i32) (result i32)))
  (type $7 (func (result i32 i32)))
  (type $8 (func (result f32 f32)))
  (type $9 (func (result i32 i32 i64)))
  (type $10 (func (param i32 i32 i64)))
  (type $11 (func (param i32 i32) (result i32 i32)))
  (type $12 (func (param i64) (result i64)))
  (type $13 (func (param f32 f32) (result f32)))
  (func $0 nop)
  (func $1  (loop end) (loop end))
  (func $2 (type $2) (loop (nop) end) (loop (result i32) (i32.const 7) end))
  (func $3
    (type $2)
    (loop (call 0) (call 0) (call 0) (call 0) end)
    (loop (result i32) (call 0) (call 0) (i32.const 8) (call 0) end)
    (drop)
    (loop
      (type $5)
      (call 0)
      (call 0)
      (call 0)
      (i32.const 8)
      (call 0)
      (call 0)
      (call 0)
      (call 0)
      (i64.const 7)
      (call 0)
      (call 0)
      (call 0)
      (call 0)
      (i32.const 9)
      (call 0)
    end)
    (drop)
    (drop)
  )
  (func $4
    (type $2)
    (loop
      (result i32)
      (loop (call 0) (block end) (nop) end)
      (loop (result i32) (call 0) (i32.const 9) end)
    end)
  )
  (func $52
    (type $12)
    (local i64)
    (i64.const 1)
    (local.set 1)
    (block
      (loop
        (local.get 0)
        (i64.eqz)
        (br_if 1)
        (local.get 0)
        (local.get 1)
        (i64.mul)
        (local.set 1)
        (local.get 0)
        (i64.const 1)
        (i64.sub)
        (local.set 0)
        (br 0)
      end)
    end)
    (local.get 1)
  )
  (func $53
    (type $12)
    (local i64 i64)
    (i64.const 1)
    (local.set 1)
    (i64.const 2)
    (local.set 2)
    (block
      (loop
        (local.get 2)
        (local.get 0)
        (i64.gt_u)
        (br_if 1)
        (local.get 1)
        (local.get 2)
        (i64.mul)
        (local.set 1)
        (local.get 2)
        (i64.const 1)
        (i64.add)
        (local.set 2)
        (br 0)
      end)
    end)
    (local.get 1)
  )
  (export "empty" (func 1))
  (export "singular" (func 2))
  (export "multi" (func 3))
  (export "nested" (func 4))
  (export "while" (func 52))
  (export "for" (func 53))
)
