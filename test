red local.set 3    local.get 2    local.get 3 .

rew < (local.get 3) | EmptyStack | 3 |-> 10 > .
search < (local.get 3) | EmptyStack | 3 |-> 10 > =>* < nil | 10 | 3 |-> 10 > .

rew < (local.get 3) (local.set 2) | EmptyStack | 3 |-> 10 > .
search < (local.get 3) (local.set 2) | EmptyStack | 3 |-> 10 > =>* < nil | EmptyStack | 2 |-> 10  3 |-> 10 > .

rew < (local.get 3) (local.get 2) (local.tee 2) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 3) (local.get 2) (local.tee 2) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | 11 $ 10 | 2 |-> 11, 3 |-> 10 > .

rew < (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | EmptyStack | 2 |-> 11, 3 |-> 11  > .

rew < (local.get 3) (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 3) (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | 10 | 2 |-> 11, 3 |-> 11  > .

rew < (i32.const 20) | EmptyStack | EmptyLocalStore > .
search < (i32.const 20) | EmptyStack | EmptyLocalStore > =>* < nil | 20 | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (i32.add) | EmptyStack | EmptyLocalStore > .

*** AFTER CHANGING SIGNED REPRESENTATION, NEGATIVE VALUES HAD TO BE MODIFIED TO COMPLY WITH THE SPEC 
rew < (i32.const 20) (i32.const 10) (i32.div_u) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 10) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
***rew < (i32.const -20) (i32.const 10) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 0) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const 10) ("i32.rem_u") | EmptyStack | EmptyLocalStore > .
***rew < (i32.const -21) (i32.const 10) ("i32.rem_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const 10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
***rew < (i32.const -21) (i32.const 10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 4294967275) (i32.const 10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
***rew < (i32.const 21) (i32.const -10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const 4294967286) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
***rew < (i32.const -21) (i32.const -10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 4294967275) (i32.const 4294967286) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > .
search < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > =>* < nil | 200 | 2 |-> 10, 3 |-> 20  > .
rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) | EmptyStack | EmptyLocalStore > .
rew < (local.get 2) (local.get 3) (i32.mul) | EmptyStack | 2 |-> 10, 3 |-> 20  > .

rew < (i32.const 20) (local.set 2) (local.get 2) (local.set 3) (i32.const 10) (local.set 2) (local.get 2) (local.set 3) | EmptyStack | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20)| EmptyStack | EmptyLocalStore > .
search < (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20)| EmptyStack | EmptyLocalStore > =>* < nil | 20 $ 20 $ 20 $ 20 $ 20 $ 20 | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > .

red label("step1", 1, (i32.const 20) (i32.const 10)) .
rew < (local.set 2) | label("step1", 1, (i32.const 20) (i32.const 10)) | EmptyLocalStore > .

red if-else(0, nop, nop) .
***rew < (i32.const 20) (i32.const 0) (if (i32.const 20) (local.set 2) else (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
***rew < (i32.const 20) (i32.const 1) (if (i32.const 20) (local.set 2) else (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 0) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 1) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .

*** Be careful, loop does not terminate. By definition it does not terminate I think.
rew < (loop "loop1" ) (i32.const 20) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) end | EmptyStack | EmptyLocalStore > .

*** Test for br : It should continue from the continuation after the end of the block (assign 3 |-> 15 and 4 |-> 20 )
rew < (i32.const 20) (block "l1" (i32.const 15) (br 0) (local.set 1) (local.set 2)  end) (local.set 3) (local.set 4) | EmptyStack | EmptyLocalStore > .

*** Test br_if
rew < (i32.const 20) (block "l1" (i32.const 15) (i32.const 1) ("br_if" 0) (local.set 1) (local.set 2)  end) (local.set 3) (local.set 4) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (block "l1" (i32.const 15) (i32.const 0) ("br_if" 0) (local.set 1) (i32.const 1)  end)  (block "l2" ("br_if" 0) (local.set 3) (local.set 4) end) | EmptyStack | EmptyLocalStore > .

*** Test TypeDef
red (type 4 (func (param (i32 i32)) (result i32))) .

*** Test FuncDef
red   (func (0) (type 0) (param i32) (result i32) (local i32)  (i32.const 1036) end) .
rew < call 0 | EmptyStack | EmptyLocalStore > # empty <-> empty # 0 |-> (func (0) (type 0) (param i32) (result i32) (local i32)  (i32.const 1036) end) .

rew < call 0 | EmptyStack | EmptyLocalStore > # empty <-> empty # 0 |-> (func (0) (type 0) (param i32) (result i32) (local i32)  (i32.const 1036) end) .

rew (module  (type 3 (func (param i32) (result i32)))  (type 4 (func (param (i32 i32)) (result i32)))  (type 5 (func (param (i32 i32 i32)) (result i32)))  (type (6) (func (param (i32 i64 i32)) (result i64)))  (func 0 (type 4) (param (i32 i32)) (result i32) (local i32) nop end)) .

rew < (global.set "gb1") | 20 | empty > # ("gb1" |-> 0) <-> (0 |-> {type mut i32 , value 10}) .
***rewrite in WASMMOD : < global.set "gb1" | 20 | empty > # "gb1" |-> 0 <-> 0 |-> {type mut i32, value 10} .
***rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
***result WASMGlobalSim: < nil | EmptyStack | empty > # "gb1" |-> 0 <-> 0 |-> {type mut i32, value 20}

*** The following test should not insert the value (global variable is const, not mutable):
rew < (global.set "gb1") | 20 | empty > # ("gb1" |-> 0) <-> (0 |-> {type const i32 , value 10}) .

*** Test to call a function, creating its own local store based on the function definition (local spec) and without losing old local store and using it again.
*** It can be followed step by step
*** This should create a local store of 4 values after calling function 0 (1 param + 3 locals)
rew < (i32.const 20) (local.set 0) call 0 (local.get 0) | EmptyStack | EmptyLocalStore > # empty <-> empty # 0 |-> (func (0) (type 0) (param i32) (result i32) (local (i32 i32 i32))  ((i32.const 10) (local.set 0)) end) .


*** Test i32 and i64 bitstring
*** Max i32
red int-to-i32(4294967295) .
red int-to-i32(4294967296) .
*** Max i64
red int-to-i64(18446744073709551615) .
red int-to-i64(18446744073709551616) .

*** Test conversion and reconversion int <-> bitval
red bitstring-to-int(get-bitstring-bitval(int-to-i32(2)), 32) .
***reduce in WASMMOD : bitstring-to-int(get-bitstring-bitval(int-to-i32(2)), 32) .
***rewrites: 418 in 0ms cpu (0ms real) (~ rewrites/second)
***result NzNat: 2

red i32-to-int(int-to-i32(4294967295)) .
***reduce in WASMMOD : i32-to-int(int-to-i32(4294967295)) .
***rewrites: 689 in 0ms cpu (0ms real) (~ rewrites/second)
***result NzNat: 4294967295

red signed(10, 32) .
***reduce in WASMMOD : signed(10, 32) .
***rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
***result NzNat: 10
red signed(4294967295, 32) .
***reduce in WASMMOD : signed(4294967295, 32) .
***rewrites: 13 in 0ms cpu (0ms real) (~ rewrites/second)
***result NzInt: -1
red signed(4294967294, 32) .
***reduce in WASMMOD : signed(4294967294, 32) .
***rewrites: 13 in 0ms cpu (0ms real) (~ rewrites/second)
***result NzInt: -2

red unsigned(signed(4294967295, 32), 32) .