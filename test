red local.set 3    local.get 2    local.get 3 .

rew < (local.get 3) | EmptyStack | 3 |-> 10 > .
search < (local.get 3) | EmptyStack | 3 |-> 10 > =>* < nil | 10 | 3 |-> 10 > .

rew < (local.get 3) (local.set 2) | EmptyStack | 3 |-> 10 > .
search < (local.get 3) (local.set 2) | EmptyStack | 3 |-> 10 > =>* < nil | EmptyStack | 2 |-> 10  3 |-> 10 > .

rew < (local.get 3) (local.get 2) (local.tee 2) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 3) (local.get 2) (local.tee 2) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | 11 $ 10 | 2 |-> 11, 3 |-> 10 > .

rew < (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | EmptyStack | 2 |-> 11, 3 |-> 11  > .

rew < (local.get 3) (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > .
search < (local.get 3) (local.get 2) (local.tee 2) (local.set 3) | EmptyStack | 2 |-> 11, 3 |-> 10 > =>* < nil | 10 | 2 |-> 11, 3 |-> 11  > .

rew < (i32.const 20) | EmptyStack | EmptyLocalStore > .
search < (i32.const 20) | EmptyStack | EmptyLocalStore > =>* < nil | 20 | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (i32.add) | EmptyStack | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (i32.div_u) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 10) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const -20) (i32.const 10) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 0) ("i32.div_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const 10) ("i32.rem_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const -21) (i32.const 10) ("i32.rem_u") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const 10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const -21) (i32.const 10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const 21) (i32.const -10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .
rew < (i32.const -21) (i32.const -10) ("i32.rem_s") | EmptyStack | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > .
search < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > =>* < nil | 200 | 2 |-> 10, 3 |-> 20  > .
rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) | EmptyStack | EmptyLocalStore > .
rew < (local.get 2) (local.get 3) (i32.mul) | EmptyStack | 2 |-> 10, 3 |-> 20  > .

rew < (i32.const 20) (local.set 2) (local.get 2) (local.set 3) (i32.const 10) (local.set 2) (local.get 2) (local.set 3) | EmptyStack | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20)| EmptyStack | EmptyLocalStore > .
search < (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20) (i32.const 20)| EmptyStack | EmptyLocalStore > =>* < nil | 20 $ 20 $ 20 $ 20 $ 20 $ 20 | EmptyLocalStore > .

rew < (i32.const 20) (i32.const 10) (local.set 2) (local.set 3) (local.get 2) (local.get 3) (i32.mul) | EmptyStack | EmptyLocalStore > .

red label("step1", 1, (i32.const 20) (i32.const 10)) .
rew < (local.set 2) | label("step1", 1, (i32.const 20) (i32.const 10)) | EmptyLocalStore > .

red if-else(0, nop, nop) .
***rew < (i32.const 20) (i32.const 0) (if (i32.const 20) (local.set 2) else (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
***rew < (i32.const 20) (i32.const 1) (if (i32.const 20) (local.set 2) else (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 0) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (i32.const 1) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) (i32.const 10) | EmptyStack | EmptyLocalStore > .

*** Be careful, loop does not terminate. By definition it does not terminate I think.
rew < (loop "loop1" ) (i32.const 20) (if (i32.const 20) (local.set 2) else (i32.const 30) (local.set 3) end) end | EmptyStack | EmptyLocalStore > .

*** Test for br : It should continue from the continuation after the end of the block (assign 3 |-> 15 and 4 |-> 20 )
rew < (i32.const 20) (block "l1" (i32.const 15) (br 0) (local.set 1) (local.set 2)  end) (local.set 3) (local.set 4) | EmptyStack | EmptyLocalStore > .

*** Test br_if
rew < (i32.const 20) (block "l1" (i32.const 15) (i32.const 1) ("br_if" 0) (local.set 1) (local.set 2)  end) (local.set 3) (local.set 4) | EmptyStack | EmptyLocalStore > .
rew < (i32.const 20) (block "l1" (i32.const 15) (i32.const 0) ("br_if" 0) (local.set 1) (i32.const 1)  end)  (block "l2" ("br_if" 0) (local.set 3) (local.set 4) end) | EmptyStack | EmptyLocalStore > .

*** Test TypeDef
red (type 4 (func (param (i32 i32)) (result i32))) .

rew (module  (type 3 (func (param i32) (result i32)))  (type 4 (func (param (i32 i32)) (result i32)))  (type 5 (func (param (i32 i32 i32)) (result i32)))  (type (6) (func (param (i32 i64 i32)) (result i64)))  (func 0 (type 4) (param (i32 i32)) (result i32))) .